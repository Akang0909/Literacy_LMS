@model List<IssueRequest>

@{
    ViewData["Title"] = "Currently";
}

<h2><i class="fa fa-book"></i> Currently Borrowed Books</h2>

<!-- Search Bar -->
<form method="get" asp-action="Currently" class="search-form">
    <input type="text" name="searchTerm" placeholder="Enter Book Name or Book ID" class="search-box" />
    <button type="submit" class="search-btn">Search</button>
</form>

<!-- Borrowed Books Table -->
<table class="styled-table">
    <thead>
        <tr>
            <th>Book ID</th>
            <th>Book Name</th>
            <th>Issue Date</th>
            <th>Due Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="currentlyTableBody">
        @foreach (var borrowedBook in Model)
        {
            <tr id="row-@borrowedBook.RequestID">
                <td>@borrowedBook.BookID</td>
                <td>@borrowedBook.Textbook</td>
                <td>@borrowedBook.RequestDate.ToString("MM/dd/yyyy")</td>
                <td>@borrowedBook.DueDate.ToString("MM/dd/yyyy")</td>
                <td style="display: flex; gap: 8px;">
                    <button type="button" class="btn btn-renew" onclick="renewBook('@borrowedBook.RequestID', this)">Renew</button>
                    <button type="button" class="btn btn-return" onclick="returnBook('@borrowedBook.RequestID', this)">Return</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<style>
    .search-form {
        margin-bottom: 20px;
        text-align: center;
    }

    .search-box {
        padding: 10px;
        width: 250px;
        border: 2px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

    .search-btn {
        padding: 10px 15px;
        margin-left: 10px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .search-btn:hover {
            background-color: #0056b3;
        }

    .styled-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .styled-table th,
        .styled-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .styled-table th {
            background-color: #007bff;
            color: white;
            font-size: 16px;
        }

        .styled-table tbody tr:hover {
            background-color: #f4f4f4;
        }

    .btn {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

    .btn-renew {
        background-color: #28a745;
        color: white;
    }

        .btn-renew:hover {
            background-color: #218838;
        }

    .btn-return {
        background-color: #dc3545;
        color: white;
    }

        .btn-return:hover {
            background-color: #c82333;
        }
</style>



<!-- Include Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Bootstrap Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="notificationToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastMessage"></div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<script>
    function showNotification(message, isSuccess = true) {
        var toastEl = document.getElementById('notificationToast');
        var toastMessage = document.getElementById('toastMessage');

        // Set the message
        toastMessage.innerText = message;

        // Change background color based on success or error
        if (isSuccess) {
            toastEl.classList.add("bg-success");
            toastEl.classList.remove("bg-danger");
        } else {
            toastEl.classList.add("bg-danger");
            toastEl.classList.remove("bg-success");
        }

        // Show the toast
        var toast = new bootstrap.Toast(toastEl);
        toast.show();
    }

    function renewBook(requestId, button) {
        $.ajax({
            url: '@Url.Action("RenewRequest", "Home")',
            type: 'POST',
            data: { requestId: requestId },
            success: function(response) {
                if (response.success) {
                    showNotification("Renew request sent successfully.");
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification(response.message, false);
                }
            },
            error: function() {
                showNotification("An error occurred while processing your request.", false);
            }
        });
    }

    function returnBook(requestId, button) {
        $.ajax({
            url: '@Url.Action("ReturnBook", "Home")',
            type: 'POST',
            data: { requestId: requestId },
            success: function(response) {
                if (response.success) {
                    showNotification("Return request sent successfully.");
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification(response.message, false);
                }
            },
            error: function() {
                showNotification("An error occurred while processing your request.", false);
            }
        });
    }
</script>

